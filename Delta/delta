#!/usr/bin/env ruby
#
# Compare the base snapshot against the current output from `ps -ef` and return the differences.
# The differences are the additional new processes that have been started since the last snapshot of `ps -ef`.
#
# If no input snapshot file is specified in the command line, default '~/snapshoot' is assumed.
# Exit with 1 if file does not exist.
#
# Tips on using this program:
#   - chmod a+x to make this Ruby script file executable
#   - place the script file in /usr/local/bin or any directory covered by your environmental PATH
#   - create your snapshot file on the command line: ps -ef > yourFile
#   - launch some applications and run the program: delta yourFile
#   - see the output from the execution -- should show the new processes since the last snapshot
#
# author: Wan Lee
# email: wan5332@gmail.com
#

file = '~/snapshoot' # default
file = ARGV[0] if ARGV.count > 0
file = File.expand_path(file)

unless File.exist?(file)
  puts "Fatal error: file '#{file}' does not exist"
  exit(1)
end

puts "Base snapshot file used: '#{file}'"

procs_orig = File.read(file).split("\n")

def cleanse(str, colIndex)
  return '' unless str.is_a? String
  arr = str.split(' ')
  return '' unless arr && arr.size > 0 && colIndex < arr.size 
  arr.delete_at(colIndex) 
  arr.join(' ')
end

cmds_orig = procs_orig.inject([]) do |arr, k|
  arr << cleanse(k, 6) # Skip TIME column as it will mess up string comparison
  arr
end

procs = `ps -ef`.split("\n")
delta = procs.inject([]) do |arr, p|
  s = cleanse(p, 6)# Skip Time column
  arr << p unless cmds_orig.include? s
  arr.pop if s =~ /ps -ef|ruby(.*)delta/ # reduce the noise
  arr
end

puts procs[0] # print out the headers
puts delta
exit(0)

